h1. File: NxOgreWorld.h


h1. World

World is the main singleton class of NxOgre. Always created first and destroyed last.


h2. createScene

p. Create a single scene with a SceneDescription as it's initial properties.


h3. Arguments

- *const SceneDescription&* := SceneDescription to create the Scene with.


h3. Traits

- return := **Scene** * -- The Scene, or NULL if the Scene was not created properly.

h2. createWorld.WorldDescription

p. Create the World instance, and Singletons (if they aren't created).


h3. Arguments

- const WorldDescription& := Description of the World to use.


h3. Traits

- return := *World** * -- The World instance, or NULL if created.
- note := If null is returned then you should check the log for the reason why it wasn't created.

h2. createWorld.WorldPrototype

p. Create the World instance, and Singletons (if they aren't created).


h3. Arguments

- *WorldPrototype** prototype := Prototype to create from.


h3. Traits

- return := **World* * -- The World instance, or NULL if created.
- note := If null is returned then you should check the log for the reason why it wasn't created.

h2. destroyScene

p. Destroys a single scene and the contents within.


h3. Arguments

- **Scene** * := The Scene to destroy



h2. destroySingletons

p. Destroy singletons. This should be called AFTER destroyWorld.



h2. destroyWorld

p. Destroyer of World, Scenes and everything within.


h3. Arguments

- **bool** also_destroy_singletons := Destroy the Singletons along with the world.


h3. Traits

- note := If you destroy the singletons, then World::destroySingletons does not need to be called.

h2. getNullCallback

p. Get a copy of the Null Callback. Used for parts of NxOgre that don't have a user callback but still recieve events.


h3. Traits

- return := **Callback** * -- The callback
- note := This OWNED by NxOgre. Do not delete it.

h2. getPhysXCookingInterface

p. Get a copy of the NxCookingInterface pointer.


h3. Traits

- return := **NxCookingInterface** * -- The NxCookingInterface pointer
- note := This OWNED by NxOgre. Do not delete it.
- Private function := Yes

h2. getPhysXSDK

p. Get a copy of the NxPhysicsSDK pointer.


h3. Traits

- return := **NxPhysicsSDK** * -- The NxPhysicsSDK pointer
- note := This OWNED by NxOgre. Do not delete it.
- Private function := Yes

h2. getRemoteDebugger

p. Get a copy of the RemoteDebugger pointer.


h3. Traits

- return := **RemoteDebugger** * -- The RemoteDebugger
- note := This OWNED by NxOgre. Do not delete it.

h2. getScenes

p. Get an iterator to the current Scenes in World.


h3. Traits

- return := **SceneIterator** * -- A iterator to the Scenes.

h2. getVisualDebugger

p. Get a copy of the VisualDebugger pointer.


h3. Traits

- return := **VisualDebugger** * -- The VisualDebugger
- note := This OWNED by NxOgre. Do not delete it.

h2. getWorld

p. Get a copy of the World pointer.


h3. Traits

- return := **World** * -- The World instance, or NULL if the World has not been created yet.

h2. hasHardware

p. Does the current computer have a PhysX accelerator, or a GPU capable of PhysX acceleration?


h3. Traits

- return := **bool** -- If the hardware has a PhysX accelerator or capable GPU.

h2. isDead

p. Is the associated NxPhysicsSDK not created, or a serious error has happened that has made it unusable.


h3. Traits

- return := **bool** -- If the NxPhysicsSDK is not created or a critical error has happened.

h2. precreateSingletons

p. Pre-create singletons of NxOgre (ResourceSystem, MeshManager, HeightFieldManager, ErrorStream, etc.)





